/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */

  export type RentingStatus = 'Canceled' | 'PaymentPending' | 'RequestDeclined' | 'RequestPending' | 'ReturnPending' | 'Returned';
  export namespace every {
    export type RentingStatus = ['Canceled', 'PaymentPending', 'RequestDeclined', 'RequestPending', 'ReturnPending', 'Returned'];
  }

  /* --- tables --- */

  /**
   * **Conversation**
   * - Table in database
   */
  export namespace Conversation {
    export type Table = 'Conversation';
    export interface Selectable {
      /**
      * **Conversation.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Conversation_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Conversation.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId: number | null;
      /**
      * **Conversation.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Conversation.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Conversation._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Conversation.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Conversation_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Conversation.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId: number | null;
      /**
      * **Conversation.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Conversation.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Conversation._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Conversation.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Conversation_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Conversation.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Conversation.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Conversation.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Conversation._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Conversation.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Conversation_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Conversation.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Conversation.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Conversation.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Conversation.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Conversation_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Conversation.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Conversation.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Conversation.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Conversation_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **ConversationUser**
   * - Table in database
   */
  export namespace ConversationUser {
    export type Table = 'ConversationUser';
    export interface Selectable {
      /**
      * **ConversationUser.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number;
      /**
      * **ConversationUser.userId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      userId: string;
      /**
      * **ConversationUser.lastViewed**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      lastViewed: Date;
    }
    export interface JSONSelectable {
      /**
      * **ConversationUser.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number;
      /**
      * **ConversationUser.userId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      userId: string;
      /**
      * **ConversationUser.lastViewed**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      lastViewed: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **ConversationUser.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ConversationUser.userId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ConversationUser.lastViewed**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      lastViewed?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ConversationUser.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ConversationUser.userId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      userId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ConversationUser.lastViewed**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      lastViewed?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ConversationUser.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ConversationUser.userId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ConversationUser.lastViewed**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      lastViewed?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Feedback**
   * - Table in database
   */
  export namespace Feedback {
    export type Table = 'Feedback';
    export interface Selectable {
      /**
      * **Feedback.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Feedback_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Feedback.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
      /**
      * **Feedback.text**
      * - `text` in database
      * - Nullable, no default
      */
      text: string | null;
      /**
      * **Feedback.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved: boolean;
      /**
      * **Feedback.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Feedback.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Feedback._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Feedback.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Feedback_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Feedback.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
      /**
      * **Feedback.text**
      * - `text` in database
      * - Nullable, no default
      */
      text: string | null;
      /**
      * **Feedback.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved: boolean;
      /**
      * **Feedback.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Feedback.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Feedback._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Feedback.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Feedback_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback.text**
      * - `text` in database
      * - Nullable, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Feedback._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Feedback.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Feedback_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Feedback.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Feedback.text**
      * - `text` in database
      * - Nullable, no default
      */
      text?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Feedback.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **Feedback.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Feedback.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Feedback.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Feedback_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Feedback.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Feedback.text**
      * - `text` in database
      * - Nullable, no default
      */
      text?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Feedback.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **Feedback.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Feedback.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Feedback_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Listing**
   * - Table in database
   */
  export namespace Listing {
    export type Table = 'Listing';
    export interface Selectable {
      /**
      * **Listing.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Listing_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Listing.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Listing.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **Listing.fullText**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullText: string;
      /**
      * **Listing.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **Listing.imageUrl**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      imageUrl: string;
      /**
      * **Listing.dayPriceEuroCents**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dayPriceEuroCents: number;
      /**
      * **Listing.depositEuroCents**
      * - `int4` in database
      * - Nullable, no default
      */
      depositEuroCents: number | null;
      /**
      * **Listing.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string;
      /**
      * **Listing.latitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      latitude: number;
      /**
      * **Listing.longitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      longitude: number;
      /**
      * **Listing.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved: boolean;
      /**
      * **Listing.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Listing.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Listing._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Listing.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Listing_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Listing.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Listing.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **Listing.fullText**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullText: string;
      /**
      * **Listing.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **Listing.imageUrl**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      imageUrl: string;
      /**
      * **Listing.dayPriceEuroCents**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dayPriceEuroCents: number;
      /**
      * **Listing.depositEuroCents**
      * - `int4` in database
      * - Nullable, no default
      */
      depositEuroCents: number | null;
      /**
      * **Listing.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string;
      /**
      * **Listing.latitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      latitude: number;
      /**
      * **Listing.longitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      longitude: number;
      /**
      * **Listing.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved: boolean;
      /**
      * **Listing.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Listing.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Listing._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Listing.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Listing_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.fullText**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullText?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.imageUrl**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      imageUrl?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.dayPriceEuroCents**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dayPriceEuroCents?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.depositEuroCents**
      * - `int4` in database
      * - Nullable, no default
      */
      depositEuroCents?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.latitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      latitude?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.longitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      longitude?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Listing._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Listing.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Listing_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Listing.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.fullText**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullText: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.imageUrl**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      imageUrl: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.dayPriceEuroCents**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dayPriceEuroCents: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Listing.depositEuroCents**
      * - `int4` in database
      * - Nullable, no default
      */
      depositEuroCents?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Listing.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Listing.latitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      latitude: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Listing.longitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      longitude: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Listing.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **Listing.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Listing.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Listing.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Listing_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Listing.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.fullText**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullText?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.category**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.imageUrl**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      imageUrl?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.dayPriceEuroCents**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dayPriceEuroCents?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Listing.depositEuroCents**
      * - `int4` in database
      * - Nullable, no default
      */
      depositEuroCents?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Listing.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Listing.latitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      latitude?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Listing.longitude**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      longitude?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Listing.isRemoved**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **Listing.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Listing.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Listing_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Message**
   * - Table in database
   */
  export namespace Message {
    export type Table = 'Message';
    export interface Selectable {
      /**
      * **Message.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Message_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Message.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number;
      /**
      * **Message.senderId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      senderId: string;
      /**
      * **Message.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
      /**
      * **Message.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Message.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Message._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Message.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Message_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Message.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number;
      /**
      * **Message.senderId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      senderId: string;
      /**
      * **Message.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
      /**
      * **Message.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Message.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Message._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Message.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Message_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message.senderId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      senderId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Message._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Message.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Message_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Message.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Message.senderId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      senderId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Message.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Message.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Message.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Message.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Message_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Message.conversationId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conversationId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Message.senderId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      senderId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Message.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Message.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Message.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Message_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Renting**
   * - Table in database
   */
  export namespace Renting {
    export type Table = 'Renting';
    export interface Selectable {
      /**
      * **Renting.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Renting_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Renting.listingId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      listingId: number;
      /**
      * **Renting.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string;
      /**
      * **Renting.renterId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      renterId: string;
      /**
      * **Renting.stripePaymentIntentId**
      * - `text` in database
      * - Nullable, no default
      */
      stripePaymentIntentId: string | null;
      /**
      * **Renting.ownerFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      ownerFeedbackId: number | null;
      /**
      * **Renting.renterFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      renterFeedbackId: number | null;
      /**
      * **Renting.scheduledStartTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledStartTime: Date;
      /**
      * **Renting.scheduledEndTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledEndTime: Date;
      /**
      * **Renting.rentingStatus**
      * - `RentingStatus` in database
      * - `NOT NULL`, default: `'RequestPending'::"RentingStatus"`
      */
      rentingStatus: RentingStatus;
      /**
      * **Renting.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Renting.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Renting._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Renting.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Renting_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Renting.listingId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      listingId: number;
      /**
      * **Renting.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string;
      /**
      * **Renting.renterId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      renterId: string;
      /**
      * **Renting.stripePaymentIntentId**
      * - `text` in database
      * - Nullable, no default
      */
      stripePaymentIntentId: string | null;
      /**
      * **Renting.ownerFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      ownerFeedbackId: number | null;
      /**
      * **Renting.renterFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      renterFeedbackId: number | null;
      /**
      * **Renting.scheduledStartTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledStartTime: db.TimestampTzString;
      /**
      * **Renting.scheduledEndTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledEndTime: db.TimestampTzString;
      /**
      * **Renting.rentingStatus**
      * - `RentingStatus` in database
      * - `NOT NULL`, default: `'RequestPending'::"RentingStatus"`
      */
      rentingStatus: RentingStatus;
      /**
      * **Renting.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Renting.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Renting._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Renting.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Renting_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.listingId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      listingId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.renterId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      renterId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.stripePaymentIntentId**
      * - `text` in database
      * - Nullable, no default
      */
      stripePaymentIntentId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.ownerFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      ownerFeedbackId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.renterFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      renterFeedbackId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.scheduledStartTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledStartTime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.scheduledEndTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledEndTime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.rentingStatus**
      * - `RentingStatus` in database
      * - `NOT NULL`, default: `'RequestPending'::"RentingStatus"`
      */
      rentingStatus?: RentingStatus | db.Parameter<RentingStatus> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, RentingStatus | db.Parameter<RentingStatus> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Renting._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Renting.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Renting_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.listingId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      listingId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Renting.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Renting.renterId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      renterId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Renting.stripePaymentIntentId**
      * - `text` in database
      * - Nullable, no default
      */
      stripePaymentIntentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.ownerFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      ownerFeedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.renterFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      renterFeedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.scheduledStartTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledStartTime: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **Renting.scheduledEndTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledEndTime: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **Renting.rentingStatus**
      * - `RentingStatus` in database
      * - `NOT NULL`, default: `'RequestPending'::"RentingStatus"`
      */
      rentingStatus?: RentingStatus | db.Parameter<RentingStatus> | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Renting.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Renting.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Renting_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.listingId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      listingId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Renting.ownerId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ownerId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Renting.renterId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      renterId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Renting.stripePaymentIntentId**
      * - `text` in database
      * - Nullable, no default
      */
      stripePaymentIntentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.ownerFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      ownerFeedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.renterFeedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      renterFeedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.scheduledStartTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledStartTime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **Renting.scheduledEndTime**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      scheduledEndTime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **Renting.rentingStatus**
      * - `RentingStatus` in database
      * - `NOT NULL`, default: `'RequestPending'::"RentingStatus"`
      */
      rentingStatus?: RentingStatus | db.Parameter<RentingStatus> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, RentingStatus | db.Parameter<RentingStatus> | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Renting.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Renting_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Report**
   * - Table in database
   */
  export namespace Report {
    export type Table = 'Report';
    export interface Selectable {
      /**
      * **Report.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Report_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Report.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId: number | null;
      /**
      * **Report.feedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      feedbackId: number | null;
      /**
      * **Report.reason**
      * - `text` in database
      * - Nullable, no default
      */
      reason: string | null;
      /**
      * **Report.isDismissed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isDismissed: boolean;
      /**
      * **Report.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **Report.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **Report._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **Report.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Report_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Report.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId: number | null;
      /**
      * **Report.feedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      feedbackId: number | null;
      /**
      * **Report.reason**
      * - `text` in database
      * - Nullable, no default
      */
      reason: string | null;
      /**
      * **Report.isDismissed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isDismissed: boolean;
      /**
      * **Report.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **Report.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **Report._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **Report.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Report_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.feedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      feedbackId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.reason**
      * - `text` in database
      * - Nullable, no default
      */
      reason?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.isDismissed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isDismissed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Report._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Report.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Report_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Report.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Report.feedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      feedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Report.reason**
      * - `text` in database
      * - Nullable, no default
      */
      reason?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Report.isDismissed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isDismissed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **Report.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Report.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Report.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Report_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.listingId**
      * - `int4` in database
      * - Nullable, no default
      */
      listingId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.feedbackId**
      * - `int4` in database
      * - Nullable, no default
      */
      feedbackId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.reason**
      * - `text` in database
      * - Nullable, no default
      */
      reason?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.isDismissed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isDismissed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Report.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Report_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **User**
   * - Table in database
   */
  export namespace User {
    export type Table = 'User';
    export interface Selectable {
      /**
      * **User.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **User.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **User.stripeAccountId**
      * - `text` in database
      * - Nullable, no default
      */
      stripeAccountId: string | null;
      /**
      * **User.isStripeAccountOnboarded**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isStripeAccountOnboarded: boolean;
      /**
      * **User.isAdmin**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isAdmin: boolean;
      /**
      * **User.isBanned**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isBanned: boolean;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **User.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **User._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface JSONSelectable {
      /**
      * **User.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **User.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **User.stripeAccountId**
      * - `text` in database
      * - Nullable, no default
      */
      stripeAccountId: string | null;
      /**
      * **User.isStripeAccountOnboarded**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isStripeAccountOnboarded: boolean;
      /**
      * **User.isAdmin**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isAdmin: boolean;
      /**
      * **User.isBanned**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isBanned: boolean;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **User.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **User._type**
      * - `text` in database
      * - Generated column
      */
      _type: string;
    }
    export interface Whereable {
      /**
      * **User.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.stripeAccountId**
      * - `text` in database
      * - Nullable, no default
      */
      stripeAccountId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.isStripeAccountOnboarded**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isStripeAccountOnboarded?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.isAdmin**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isAdmin?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.isBanned**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isBanned?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User._type**
      * - `text` in database
      * - Generated column
      */
      _type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **User.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.stripeAccountId**
      * - `text` in database
      * - Nullable, no default
      */
      stripeAccountId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **User.isStripeAccountOnboarded**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isStripeAccountOnboarded?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **User.isAdmin**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isAdmin?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **User.isBanned**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isBanned?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **User.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **User.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.stripeAccountId**
      * - `text` in database
      * - Nullable, no default
      */
      stripeAccountId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **User.isStripeAccountOnboarded**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isStripeAccountOnboarded?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.isAdmin**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isAdmin?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.isBanned**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      isBanned?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'User_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = Conversation.Table | ConversationUser.Table | Feedback.Table | Listing.Table | Message.Table | Renting.Table | Report.Table | User.Table;
  export type Selectable = Conversation.Selectable | ConversationUser.Selectable | Feedback.Selectable | Listing.Selectable | Message.Selectable | Renting.Selectable | Report.Selectable | User.Selectable;
  export type JSONSelectable = Conversation.JSONSelectable | ConversationUser.JSONSelectable | Feedback.JSONSelectable | Listing.JSONSelectable | Message.JSONSelectable | Renting.JSONSelectable | Report.JSONSelectable | User.JSONSelectable;
  export type Whereable = Conversation.Whereable | ConversationUser.Whereable | Feedback.Whereable | Listing.Whereable | Message.Whereable | Renting.Whereable | Report.Whereable | User.Whereable;
  export type Insertable = Conversation.Insertable | ConversationUser.Insertable | Feedback.Insertable | Listing.Insertable | Message.Insertable | Renting.Insertable | Report.Insertable | User.Insertable;
  export type Updatable = Conversation.Updatable | ConversationUser.Updatable | Feedback.Updatable | Listing.Updatable | Message.Updatable | Renting.Updatable | Report.Updatable | User.Updatable;
  export type UniqueIndex = Conversation.UniqueIndex | ConversationUser.UniqueIndex | Feedback.UniqueIndex | Listing.UniqueIndex | Message.UniqueIndex | Renting.UniqueIndex | Report.UniqueIndex | User.UniqueIndex;
  export type Column = Conversation.Column | ConversationUser.Column | Feedback.Column | Listing.Column | Message.Column | Renting.Column | Report.Column | User.Column;
  export type AllBaseTables = [Conversation.Table, ConversationUser.Table, Feedback.Table, Listing.Table, Message.Table, Renting.Table, Report.Table, User.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [Conversation.Table, ConversationUser.Table, Feedback.Table, Listing.Table, Message.Table, Renting.Table, Report.Table, User.Table];


  export type SelectableForTable<T extends Table> = {
    Conversation: Conversation.Selectable;
    ConversationUser: ConversationUser.Selectable;
    Feedback: Feedback.Selectable;
    Listing: Listing.Selectable;
    Message: Message.Selectable;
    Renting: Renting.Selectable;
    Report: Report.Selectable;
    User: User.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    Conversation: Conversation.JSONSelectable;
    ConversationUser: ConversationUser.JSONSelectable;
    Feedback: Feedback.JSONSelectable;
    Listing: Listing.JSONSelectable;
    Message: Message.JSONSelectable;
    Renting: Renting.JSONSelectable;
    Report: Report.JSONSelectable;
    User: User.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    Conversation: Conversation.Whereable;
    ConversationUser: ConversationUser.Whereable;
    Feedback: Feedback.Whereable;
    Listing: Listing.Whereable;
    Message: Message.Whereable;
    Renting: Renting.Whereable;
    Report: Report.Whereable;
    User: User.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    Conversation: Conversation.Insertable;
    ConversationUser: ConversationUser.Insertable;
    Feedback: Feedback.Insertable;
    Listing: Listing.Insertable;
    Message: Message.Insertable;
    Renting: Renting.Insertable;
    Report: Report.Insertable;
    User: User.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    Conversation: Conversation.Updatable;
    ConversationUser: ConversationUser.Updatable;
    Feedback: Feedback.Updatable;
    Listing: Listing.Updatable;
    Message: Message.Updatable;
    Renting: Renting.Updatable;
    Report: Report.Updatable;
    User: User.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    Conversation: Conversation.UniqueIndex;
    ConversationUser: ConversationUser.UniqueIndex;
    Feedback: Feedback.UniqueIndex;
    Listing: Listing.UniqueIndex;
    Message: Message.UniqueIndex;
    Renting: Renting.UniqueIndex;
    Report: Report.UniqueIndex;
    User: User.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    Conversation: Conversation.Column;
    ConversationUser: ConversationUser.Column;
    Feedback: Feedback.Column;
    Listing: Listing.Column;
    Message: Message.Column;
    Renting: Renting.Column;
    Report: Report.Column;
    User: User.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    Conversation: Conversation.SQL;
    ConversationUser: ConversationUser.SQL;
    Feedback: Feedback.SQL;
    Listing: Listing.SQL;
    Message: Message.SQL;
    Renting: Renting.SQL;
    Report: Report.SQL;
    User: User.SQL;
  }[T];

}
